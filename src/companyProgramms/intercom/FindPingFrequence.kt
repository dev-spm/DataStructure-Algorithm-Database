package companyProgramms.intercomval userHashMap = mutableMapOf<String, Set<Int>>()fun main() {    inputUserFrequence("user1", 10)    inputUserFrequence("user1", 40)    inputUserFrequence("user1", 70)    inputUserFrequence("user1", 130)    inputUserFrequence("user1", 200)    inputUserFrequence("user2", 40)    inputUserFrequence("user2", 100)    inputUserFrequence("user2", 200)    inputUserFrequence("user2", 3700)    inputUserFrequence("user2", 3900)    inputUserFrequence("user2", 40)    calculateRangeOfPingLogin("user1", 0, 150, "minute")//    output [ 2 1 1 ]}fun inputUserFrequence(user: String, time: Int) {    if (userHashMap.contains(user)) {        val listPing = userHashMap[user]?.toMutableSet()        listPing?.add(time)        listPing?.let {            userHashMap[user] = it        }    } else {        userHashMap[user] = mutableSetOf(time)    }}fun calculateRangeOfPingLogin(user: String, startTime: Int, endTime: Int, frequence: String) {    val frequenceSet = userHashMap[user] // 10 40 70 130    val outputList = mutableMapOf<Int, Int>()    when (frequence) {        "minute" -> {            val numbers = (startTime + 60 .. endTime  step 60).toList() + endTime            for ((count, time) in numbers.withIndex()) { // 0, 150                frequenceSet?.forEachIndexed { index, userLoginTime ->  // 10 40 70 130 200                    if (userLoginTime <= time) {                        if (!outputList.contains(userLoginTime)) {                            outputList[userLoginTime] = count                        }                    }                    println("$time $userLoginTime $count $outputList")                }            }        }        "hour" -> {        }    }}