package companyProgramms.intercomval userHashMap = mutableMapOf<String, Set<Int>>()fun main() {    inputUserFrequence("user1", 10)    inputUserFrequence("user1", 40)    inputUserFrequence("user1", 70)    inputUserFrequence("user1", 130)    inputUserFrequence("user1", 200)    inputUserFrequence("user2", 40)    inputUserFrequence("user2", 100)    inputUserFrequence("user2", 200)    inputUserFrequence("user2", 3700)    inputUserFrequence("user2", 3900)    inputUserFrequence("user2", 40)    calculateRangeOfPingLogin("user1", 0, 150, "minute")//    output [ 2 1 1 ]}fun inputUserFrequence(user: String, time: Int) {    if (userHashMap.contains(user)) {        val listPing = userHashMap[user]?.toMutableSet()        listPing?.add(time)        listPing?.let {            userHashMap[user] = it        }    } else {        userHashMap[user] = mutableSetOf(time)    }}fun calculateRangeOfPingLogin(    user: String,    userLoginStartTime: Int,    userLoginEndTime: Int,    frequency: String) {    val userFrequencySet = userHashMap[user]    val outputList = mutableMapOf<Int, Int>()    val TIME_FORMAT = when (frequency) {        "minute" -> 60        "hour" -> 3600        "day" -> 86000        else -> 1    }    var startRange = userLoginStartTime    val frequencyRange =        (userLoginStartTime + TIME_FORMAT..userLoginEndTime step TIME_FORMAT).toList() + userLoginEndTime    for ((count, endTimeRange) in frequencyRange.withIndex()) {        userFrequencySet?.forEach { userFrequency ->            if (userFrequency in startRange..endTimeRange) {                if (!outputList.contains(userFrequency)) {                    var indexCount = outputList[count] ?: 0                    outputList[count] = ++indexCount                }            }        }        startRange = endTimeRange    }}